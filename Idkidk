local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- Store original positions of players
local OriginalPositions = {}
local SelectedPlayer = "all" -- Default to kill all
local BringKillEnabled = false
local SilentKillEnabled = false
local ViewingEnabled = false

-- Main GUI
local MainGui = Instance.new("ScreenGui", PlayerGui)
MainGui.Name = "MeleeKillGui"
MainGui.ResetOnSpawn = false

local MainFrame = Instance.new("Frame", MainGui)
MainFrame.Size = UDim2.new(0, 200, 0, 80) -- Increased height to accommodate new toggle
MainFrame.Position = UDim2.new(1, -210, 0, 10)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.BackgroundTransparency = 0.2
MainFrame.Active = true
Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0, 8)

-- Drag handle
local DragHandle = Instance.new("TextButton", MainFrame)
DragHandle.Size = UDim2.new(1, 0, 0, 15)
DragHandle.Position = UDim2.new(0, 0, 0, 0)
DragHandle.BackgroundTransparency = 0.7
DragHandle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
DragHandle.Text = "â‰¡"
DragHandle.TextColor3 = Color3.fromRGB(200, 200, 200)
DragHandle.TextSize = 12
DragHandle.Font = Enum.Font.GothamBold
Instance.new("UICorner", DragHandle).CornerRadius = UDim.new(0, 8)

-- Make only the drag handle control dragging
local dragging = false
local dragStart
local startPos

local function updateDrag(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(
        startPos.X.Scale, startPos.X.Offset + delta.X,
        startPos.Y.Scale, startPos.Y.Offset + delta.Y
    )
end

DragHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        updateDrag(input)
    end
end)

-- Toggle button
local Btn = Instance.new("TextButton", MainFrame)
Btn.Size = UDim2.new(0.6, -10, 0, 25)
Btn.Position = UDim2.new(0, 5, 0, 20)
Btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Btn.BackgroundTransparency = 0.3
Btn.TextColor3 = Color3.fromRGB(255, 80, 80)
Btn.Font = Enum.Font.GothamBold
Btn.TextSize = 14
Btn.Text = "Start: OFF"
Instance.new("UICorner", Btn).CornerRadius = UDim.new(0, 6)

local Enabled = false

Btn.MouseButton1Click:Connect(function()
    Enabled = not Enabled
    Btn.Text = Enabled and "Start: ON" or "Start: OFF"
    Btn.TextColor3 = Enabled and Color3.fromRGB(80, 255, 80) or Color3.fromRGB(255, 80, 80)
    
    -- When turning off, restore all positions
    if not Enabled then
        for playerName, position in pairs(OriginalPositions) do
            local player = Players:FindFirstChild(playerName)
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
            end
        end
        OriginalPositions = {}
    end
end)

-- Player selection dropdown button (now next to the kill button)
local PlayerDropdown = Instance.new("TextButton", MainFrame)
PlayerDropdown.Size = UDim2.new(0.35, -5, 0, 25)
PlayerDropdown.Position = UDim2.new(0.63, 5, 0, 20)
PlayerDropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
PlayerDropdown.BackgroundTransparency = 0.3
PlayerDropdown.TextColor3 = Color3.fromRGB(200, 200, 200)
PlayerDropdown.Font = Enum.Font.GothamBold
PlayerDropdown.TextSize = 12 -- Smaller text to fit
PlayerDropdown.Text = "all"
Instance.new("UICorner", PlayerDropdown).CornerRadius = UDim.new(0, 6)

local ViewPlayerBtn = Instance.new("TextButton", MainFrame)
ViewPlayerBtn.Size = UDim2.new(0.35, -5, 0, 25)
ViewPlayerBtn.Position = UDim2.new(0.63, 5, 0, 50)
ViewPlayerBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
ViewPlayerBtn.BackgroundTransparency = 0.3
ViewPlayerBtn.TextColor3 = Color3.fromRGB(255, 80, 80)
ViewPlayerBtn.Font = Enum.Font.GothamBold
ViewPlayerBtn.TextSize = 12
ViewPlayerBtn.Text = "View: OFF"
Instance.new("UICorner", ViewPlayerBtn).CornerRadius = UDim.new(0, 6)

-- SilentKill toggle button
local SilentKillBtn = Instance.new("TextButton", MainFrame)
SilentKillBtn.Size = UDim2.new(0.6, -10, 0, 25)
SilentKillBtn.Position = UDim2.new(0, 5, 0, 50)
SilentKillBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
SilentKillBtn.BackgroundTransparency = 0.3
SilentKillBtn.TextColor3 = Color3.fromRGB(255, 80, 80)
SilentKillBtn.Font = Enum.Font.GothamBold
SilentKillBtn.TextSize = 14
SilentKillBtn.Text = "SilentMode: OFF"
Instance.new("UICorner", SilentKillBtn).CornerRadius = UDim.new(0, 6)

SilentKillBtn.MouseButton1Click:Connect(function()
    SilentKillEnabled = not SilentKillEnabled
    SilentKillBtn.Text = SilentKillEnabled and "SilentMode: ON" or "SilentMode: OFF"
    SilentKillBtn.TextColor3 = SilentKillEnabled and Color3.fromRGB(80, 255, 80) or Color3.fromRGB(255, 80, 80)
end)

-- Dropdown frame (now parented to MainFrame)
local DropdownFrame = Instance.new("Frame", MainFrame)
DropdownFrame.Size = UDim2.new(0, 150, 0, 150) -- Fixed height for scrolling
DropdownFrame.Position = UDim2.new(0, PlayerDropdown.AbsolutePosition.X - MainFrame.AbsolutePosition.X, 0, PlayerDropdown.AbsolutePosition.Y - MainFrame.AbsolutePosition.Y + 30)
DropdownFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
DropdownFrame.BackgroundTransparency = 0.2
DropdownFrame.Visible = false
DropdownFrame.ZIndex = 2 -- Ensure it appears above other elements
DropdownFrame.ClipsDescendants = true -- Important for scrolling
Instance.new("UICorner", DropdownFrame).CornerRadius = UDim.new(0, 8)

-- Scrolling frame for dropdown content
local DropdownScroll = Instance.new("ScrollingFrame", DropdownFrame)
DropdownScroll.Size = UDim2.new(1, 0, 1, 0)
DropdownScroll.BackgroundTransparency = 1
DropdownScroll.ScrollBarThickness = 5
DropdownScroll.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
DropdownScroll.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated dynamically
DropdownScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Auto-size to content

local DropdownLayout = Instance.new("UIListLayout", DropdownScroll)
DropdownLayout.Padding = UDim.new(0, 5)
DropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder

local AllOption = Instance.new("TextButton", DropdownScroll)
AllOption.Size = UDim2.new(1, -10, 0, 25)
AllOption.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
AllOption.BackgroundTransparency = 0.3
AllOption.TextColor3 = Color3.fromRGB(200, 200, 200)
AllOption.Font = Enum.Font.GothamBold
AllOption.TextSize = 14
AllOption.Text = "all"
AllOption.LayoutOrder = 0
Instance.new("UICorner", AllOption).CornerRadius = UDim.new(0, 6)

AllOption.MouseButton1Click:Connect(function()
    SelectedPlayer = "all"
    PlayerDropdown.Text = "all"
    DropdownFrame.Visible = false
    
    -- Restore positions when changing target
    for playerName, position in pairs(OriginalPositions) do
        local player = Players:FindFirstChild(playerName)
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
        end
    end
    OriginalPositions = {}
end)

local function updateDropdown()
    -- Clear existing player options (except "all" option)
    for _, child in ipairs(DropdownScroll:GetChildren()) do
        if child ~= AllOption and child ~= DropdownLayout then
            child:Destroy()
        end
    end
    
    -- Add current players
    local yOffset = 0
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local playerOption = Instance.new("TextButton", DropdownScroll)
            playerOption.Size = UDim2.new(1, -10, 0, 25)
            playerOption.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            playerOption.BackgroundTransparency = 0.3
            playerOption.TextColor3 = Color3.fromRGB(200, 200, 200)
            playerOption.Font = Enum.Font.GothamBold
            playerOption.TextSize = 14
            playerOption.Text = player.Name
            playerOption.LayoutOrder = yOffset + 1
            Instance.new("UICorner", playerOption).CornerRadius = UDim.new(0, 6)
            
            playerOption.MouseButton1Click:Connect(function()
                SelectedPlayer = player.Name
                PlayerDropdown.Text = player.Name
                DropdownFrame.Visible = false
                
                -- Restore positions when changing target
                for playerName, position in pairs(OriginalPositions) do
                    local plr = Players:FindFirstChild(playerName)
                    if plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                        plr.Character.HumanoidRootPart.CFrame = CFrame.new(position)
                    end
                end
                OriginalPositions = {}
            end)
            
            yOffset = yOffset + 1
        end
    end
    
    -- Update canvas size (handled automatically by AutomaticCanvasSize)
end

PlayerDropdown.MouseButton1Click:Connect(function()
    updateDropdown()
    DropdownFrame.Visible = not DropdownFrame.Visible
end)

-- Close dropdown when clicking elsewhere
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        if DropdownFrame.Visible then
            local mousePos = input.Position
            local dropdownPos = DropdownFrame.AbsolutePosition
            local dropdownSize = DropdownFrame.AbsoluteSize
            
            -- Check if click is outside dropdown
            if not (mousePos.X >= dropdownPos.X and mousePos.X <= dropdownPos.X + dropdownSize.X and
                   mousePos.Y >= dropdownPos.Y and mousePos.Y <= dropdownPos.Y + dropdownSize.Y) then
                DropdownFrame.Visible = false
            end
        end
    end
end)

local CurrentCamera = workspace.CurrentCamera

ViewPlayerBtn.MouseButton1Click:Connect(function()
    ViewingEnabled = not ViewingEnabled
    ViewPlayerBtn.Text = ViewingEnabled and "View: ON" or "View: OFF"
    ViewPlayerBtn.TextColor3 = ViewingEnabled and Color3.fromRGB(80, 255, 80) or Color3.fromRGB(255, 80, 80)

    if not ViewingEnabled then
        CurrentCamera.CameraSubject = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    end
end)

-- Update camera every frame if viewing is enabled
RunService.RenderStepped:Connect(function()
    if ViewingEnabled and SelectedPlayer ~= "all" then
        local targetPlayer = Players:FindFirstChild(SelectedPlayer)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
            CurrentCamera.CameraSubject = targetPlayer.Character.Humanoid
        end
    end
end)

-- Function to shake a character
local function shakeCharacter(char, intensity, duration)
    if not char or not char:FindFirstChild("HumanoidRootPart") then return end
    
    local root = char.HumanoidRootPart
    local originalPosition = root.Position
    
    local startTime = os.clock()
    while os.clock() - startTime < duration do
        if not root or not root.Parent then break end
        local offset = Vector3.new(
            (math.random() * 2 - 1) * intensity,
            (math.random() * 2 - 1) * intensity,
            (math.random() * 2 - 1) * intensity
        )
        root.CFrame = CFrame.new(originalPosition + offset)
        RunService.Heartbeat:Wait()
    end
    
    if root and root.Parent then
        root.CFrame = CFrame.new(originalPosition)
    end
end

-- Function to shake a tool
local function shakeTool(tool, intensity, duration)
    if not tool or not tool:FindFirstChild("Handle") then return end

    local character = tool.Parent
    if not character or not character:IsA("Model") then return end

    local rightGrip = character:FindFirstChild("RightGrip")
    if not rightGrip or not rightGrip:IsA("Weld") then return end

    local originalC0 = rightGrip.C0
    local startTime = os.clock()

    while os.clock() - startTime < duration do
        if not rightGrip or not rightGrip.Parent then break end
        local offset = CFrame.Angles(
            math.rad(math.random(-intensity, intensity)),
            math.rad(math.random(-intensity, intensity)),
            math.rad(math.random(-intensity, intensity))
        )
        rightGrip.C0 = originalC0 * offset
        RunService.Heartbeat:Wait()
    end

    if rightGrip and rightGrip.Parent then
        rightGrip.C0 = originalC0
    end
end

-- Function to flicker teleport a player
local function flickerTeleport(player, targetCFrame, originalCFrame, duration)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    
    local root = player.Character.HumanoidRootPart
    local startTime = os.clock()
    local flickerCount = 0
    
    while os.clock() - startTime < duration do
        if not root or not root.Parent then break end
        
        -- Alternate between target and original position
        if flickerCount % 2 == 0 then
            root.CFrame = targetCFrame
        else
            root.CFrame = originalCFrame
        end
        
        flickerCount = flickerCount + 1
        RunService.Heartbeat:Wait()
    end
    
    -- End at target position
    if root and root.Parent then
        root.CFrame = targetCFrame
    end
end

-- Function to restore player position
local function restorePlayerPosition(playerName)
    local position = OriginalPositions[playerName]
    if position then
        local player = Players:FindFirstChild(playerName)
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
        end
        OriginalPositions[playerName] = nil
    end
end

-- Track killed players
local KilledPlayers = {}

-- Main kill function
RunService.RenderStepped:Connect(function()
    if not Enabled then return end
    
    local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
    if not tool or not tool:FindFirstChild("Handle") then return end
    
    local handle = tool.Handle
    
    if SelectedPlayer == "all" then
        -- Normal kill all function
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then
                local char = plr.Character
                if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
                    if LocalPlayer:DistanceFromCharacter(char.HumanoidRootPart.Position) <= 1000000 then
                        -- Save original position if not already saved
                        if not OriginalPositions[plr.Name] and char.Humanoid.Health > 0 then
                            OriginalPositions[plr.Name] = char.HumanoidRootPart.Position
                        end
                        
                        -- If player was alive but now dead, restore position
                        if KilledPlayers[plr.Name] and char.Humanoid.Health <= 0 then
                            restorePlayerPosition(plr.Name)
                            KilledPlayers[plr.Name] = nil
                        elseif char.Humanoid.Health > 0 then
                            if SilentKillEnabled then
                                -- Shake the tool instead of activating it
                                spawn(function()
                                    shakeTool(tool, 0.5, 0.3)
                                end)
                            else
                                tool:Activate()
                            end
                            
                            for _, part in pairs(char:GetChildren()) do
                                if part:IsA("BasePart") then
                                    firetouchinterest(handle, part, 0)
                                    firetouchinterest(handle, part, 1)
                                end
                            end
                            
                            -- Mark player as killed
                            KilledPlayers[plr.Name] = true
                        end
                    end
                end
            end
        end
    else
        -- Targeted player kill with BringKill effects
        local targetPlayer = Players:FindFirstChild(SelectedPlayer)
        if targetPlayer then
            local char = targetPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
                if LocalPlayer:DistanceFromCharacter(char.HumanoidRootPart.Position) <= 1000000 then
                    -- Save original position if not already saved
                    if not OriginalPositions[targetPlayer.Name] and char.Humanoid.Health > 0 then
                        OriginalPositions[targetPlayer.Name] = char.HumanoidRootPart.Position
                    end
                    
                    local originalPos = OriginalPositions[targetPlayer.Name]
                    local targetPos = handle.Position + Vector3.new(0, 3, 0) -- 3 studs above the sword
                    
                    -- If player was alive but now dead, restore position
                    if KilledPlayers[targetPlayer.Name] and char.Humanoid.Health <= 0 then
                        restorePlayerPosition(targetPlayer.Name)
                        KilledPlayers[targetPlayer.Name] = nil
                    elseif char.Humanoid.Health > 0 then
                        if BringKillEnabled then
                            -- Shake the player first
                            spawn(function()
                                shakeCharacter(char, 0.5, 0.3)
                            end)
                            
                            -- Flicker teleport to sword
                            flickerTeleport(targetPlayer, CFrame.new(targetPos), CFrame.new(originalPos), 0.5)
                        end
                        
                        -- Kill with silent option
                        if SilentKillEnabled then
                            -- Shake the tool instead of activating it
                            spawn(function()
                                shakeTool(tool, 0.5, 0.3)
                            end)
                        else
                            tool:Activate()
                        end
                        
                        for _, part in pairs(char:GetChildren()) do
                            if part:IsA("BasePart") then
                                firetouchinterest(handle, part, 0)
                                firetouchinterest(handle, part, 1)
                            end
                        end
                        
                        -- Mark player as killed
                        KilledPlayers[targetPlayer.Name] = true
                    end
                end
            end
        end
    end
end)

-- Clean up when tool is unequipped
LocalPlayer.CharacterRemoving:Connect(function()
    -- Restore all positions when character is removed (tool unequipped)
    for playerName, position in pairs(OriginalPositions) do
        local player = Players:FindFirstChild(playerName)
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
        end
    end
    OriginalPositions = {}
    KilledPlayers = {}
end)

-- Update dropdown when players join/leave
Players.PlayerAdded:Connect(updateDropdown)
Players.PlayerRemoving:Connect(updateDropdown)

-- [ LoadsScriptResources ]
pcall(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/hm5650/LoadResources/refs/heads/main/ResSourcesLoaderSource", true))()
    warn("StartedScript")
end)

-- [[ THIS IS A SNIPPET ]] --

-- Import the Library
local fnl = loadstring(game:HttpGetAsync 'https://raw.githubusercontent.com/Code1Tech/utils/main/notification.lua')()

-- Make a Notification function
function notify(title, text, duration)
  title = title or "Notification"
  text = text or "No text provided."
  duration = duration or 5
  
  fnl:MakeNotification({
    Title = title,
    Text = text,
    Duration = duration
  })
end

-- Use the func
notify("Quick Reminder", "This Only Works With A Sword\n\n[Script Made By @hmmm5650]", 3.5)
